// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
    id Int @id @default(autoincrement())
    username String @unique
    password String

    isVerified Boolean @default(false)
    canCreatePublicWorkGroup Boolean @default(false)

    workGroups WorkGroup[]
    works Work[]
    subedGroups Subscription[]
    sessions Session[]

    createdAt DateTime @default(now())
}

model Session {
    id Int @id @default(autoincrement())

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId Int

    hash String @db.Text

    createdAt DateTime @default(now())
}

model WorkGroup {
    id Int @id @default(autoincrement())

    creator User @relation(fields: [creatorId], references: [id], onDelete: Cascade)
    creatorId Int

    name String
    color String
    info String @default("none")

    haveComments Boolean @default(false)
    isVerified Boolean @default(false)
    isPrivate Boolean

    works Work[]
    subscribers Subscription[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Subscription {
    id Int @id @default(autoincrement())

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId Int

    group WorkGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
    groupId Int

    createdAt DateTime @default(now())
}

model Work {
    id Int @id @default(autoincrement())

    group WorkGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
    groupId Int

    creator User @relation(fields: [creatorId], references: [id], onDelete: Cascade)
    creatorId Int

    title String
    description String @db.Text

    dueDate DateTime
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}